21pc13 - ir03zcgGgr9UkFYiwGxvT3BlbkFJLag01jLVoe6Ou8rmNURP

21pc19 - OTaSzNANFaH4Zmuvq0ZnT3BlbkFJY4mcSLWyAPW3eL2ncMnP

21pc01 - MnNdC1SzSEAVCbkCjWszT3BlbkFJC2pLCtUuSSOFZ2FEHnk0

21pc23 - INRCrAyyf59hecbwEzZ4T3BlbkFJwxOHbwTHMxmSt38tCMl0

21pc09 - 1jApbfQ7iUzaC3GHHdDhT3BlbkFJUTdesQZ3HR4k1S1iRZtb

21pc18 - CPGhX4VVVKt2upUsQXasT3BlbkFJTYdxA1WyYxKyvQiSlW74

21PC17 - N3SGxCzzYXhklGVdYONzT3BlbkFJ8OkrvzwTGUIWqCESyGFy

21PC25-  seTTDNEvkkbhI3WmCauyT3BlbkFJycCBfk5MVkv4HOb2XYeI

21PC31 - 74evNFm4ggpif3IgA2pGT3BlbkFJzPhlTuYbxQWHQQFGxqhB
 
21PC29 - MxneXSIrPTOBvEKWOGx7T3BlbkFJ9rv0hg1pyQPw3UtVSuzL

21PC05 - NpkxX52f5PP9yrDr3vEXT3BlbkFJVl8yy28JgXNAtjtcFLC1

21PC11 - dFb0vJEFxogCg9V6pYNrT3BlbkFJm1r4ZNzv4QSCLt4xDGPp

21pc08 - CczCJ2AJ25eiIQyIhvdST3BlbkFJoG5JGbrwGWWcq1TcX2Fq

21pc07 - as7gS0iDPVAwNlEsX1QKT3BlbkFJZqpvxsdsBvXiFKTmwFx0

21PC33 - WiFt7TW5SiPGINOSKMSKT3BlbkFJx78bP0jXvVY7qQ1AEKOp

21PC03 - bjmFzzIlFQN5NF991KYTT3BlbkFJuDBP3rTgh58b0rIFW8Cq

21PC22 - 8MYhqw0oMftMpE3J2plHT3BlbkFJKdbc5xdIJ8qxrCM6yPHE

21PC16 - nuQfsp7Pdkgbz3zBiBK8T3BlbkFJ5I2YTgLGuvelHN1GLae4

21PC10 - tp0ABygyRFX9J8dSfMUTT3BlbkFJiKjnBJQuMuQNupGSQrFn

21PC28 - AGb10wZYfzxfISn32BY7T3BlbkFJ4VivBAgrCJOHdvE8b5en

21PC04 - lra8SADSevtbaNF3g2X0T3BlbkFJgSZ9ZyKw9GDO961p8Z6L

SMRITHI ticbNikh8ATmr5cn2Q3zT3BlbkFJHYTzkzWp5r8MTBBmUk4i

##############  EXCEPTION HANDLING #####################

//FILE NOT FOUND ERROR HANDLING

import java.io.*;

public class ExceptionHandlingExample {
    public static void main(String[] args) {
        try {
            File file = new File("file.txt");
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                System.out.println(line);
            }
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println("File not found");
        } catch (IOException ex) {
            System.out.println("Error reading file");
        }
    }
}

//FILE HANDLING SAMPLE

import java.io.File;
import java.io.IOException;

public class FileHandlingExample {
    public static void main(String[] args) {
        // Create a new file object
        File file = new File("file.txt");

        try {
            // Check if the file exists
            if (file.exists()) {
                System.out.println("File already exists");
            } else {
                // Create a new file
                file.createNewFile();
                System.out.println("File created");
            }

            // Get the file name
            System.out.println("File name: " + file.getName());

            // Get the absolute path
            System.out.println("Absolute path: " + file.getAbsolutePath());

            // Check if the file is readable and writable
            System.out.println("Readable: " + file.canRead());
            System.out.println("Writable: " + file.canWrite());

            // Get the file size in bytes
            System.out.println("File size in bytes: " + file.length());

            // Delete the file
            file.delete();
            System.out.println("File deleted");
        } catch (IOException ex) {
            System.out.println("Error handling file");
        }
    }
}



//MULTI THREADING USING INTERFACE

public class multithreading_inter {
    public static void main(String args[]){
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int i=0;i<5;i++){
                    System.out.println("Thread 1 :"+i);
                    try{
                        Thread.sleep(1000);
                    }catch(InterruptedException ex){
                        ex.printStackTrace();
                    }
                }
            }
        });

        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int i=0;i<5;i++){
                    System.out.println("Thread 2 :"+i);
                    try{
                        Thread.sleep(1000);
                    }catch(InterruptedException e){
                        e.printStackTrace();
                    }
                }
            }
        });
        t1.start();
        t2.start();
    }
}

//MULTI THREADING USING ABSTRACT CLASS

class MyThread extends Thread {
    String name = "";

    public MyThread(String name){
        this.name = name;
    }

    public void run(){
        for(int i=0;i<5;i++){
            System.out.println(this.name+" : "+i);
            try{
                Thread.sleep(1000);
            }catch(InterruptedException e){
                e.printStackTrace();
            }
        }
    }
}
public class multithreading_abstract_class {
    public static void main(String args[]){
        MyThread t1 = new MyThread("Thread 1");
        MyThread t2 = new MyThread("Thread 2");

        t1.start();
        t2.start();
    }
}

//MAIN THREAD 

class CurrentThreadDemo {
	public static void main(String args[]) {
		Thread t = Thread.currentThread();
		System.out.println("Current thread: " + t);
		t.setName("My Thread");
		System.out.println("After name change: " + t);
		try {
			for(int n = 5; n > 0; n--) {
				System.out.println(n);
				Thread.sleep(1000);
			}
		} catch (InterruptedException e) {
			System.out.println("Main thread interrupted");
		}
	}
}

//RUNNABLE INTERFACE

class NewThread implements Runnable {
	Thread t;
	NewThread() {
		t = new Thread(this, "Demo Thread");
		System.out.println("Child thread: " + t);
		t.start(); 
	}
	public void run() {
		try {
			for(int i = 5; i > 0; i--) {
				System.out.println("Child Thread: " + i);
				Thread.sleep(500);
			}
		} catch (InterruptedException e) {
			System.out.println("Child interrupted.");
		}
		System.out.println("Exiting child thread.");
	}
}

public class ThreadDemo {
	public static void main(String args[ ] ) {
		new NewThread(); 
		try {
			for(int i = 5; i > 0; i--) {
				System.out.println("Main Thread: " + i);
				Thread.sleep(1000);
			}
		} catch (InterruptedException e) {
			System.out.println("Main thread interrupted.");
		}
		System.out.println("Main thread exiting.");
	}
}

//THREAD CLASS

class NewThread extends Thread {
	NewThread() {
		super("Demo Thread");
		System.out.println("Child thread: " + this);
		start(); 
	}
	public void run() {
		try {
			for(int i = 5; i > 0; i--) {
				System.out.println("Child Thread: " + i);
				Thread.sleep(500);
			}	
		} catch (InterruptedException e) {
			System.out.println("Child interrupted.");
		}
		System.out.println("Exiting child thread.");
	}
}

public class ExtendThread {
	public static void main(String args[]) {
		new NewThread(); 
		try {
			for(int i = 5; i > 0; i--) {
				System.out.println("Main Thread: " + i);
				Thread.sleep(1000);
			}
		} catch (InterruptedException e) {
			System.out.println("Main thread interrupted.");
		}
		System.out.println("Main thread exiting.");
	}
}

//THREAD PRIORITY

class ThreadDemo extends Thread { 
	public static void main(String[] args) { 
		ThreadDemo t1 = new ThreadDemo(); 
		ThreadDemo t2 = new ThreadDemo(); 
		ThreadDemo t3 = new ThreadDemo(); 
		System.out.println("t1 thread priority: "+ t1.getPriority());  
        		System.out.println("t2 thread priority: "+ t2.getPriority());  
		System.out.println("t3 thread priority: "+ t3.getPriority());  
  
      		t1.setPriority(2); 
		t2.setPriority(5); 
        	t3.setPriority(8); 
		
		System.out.println("t1 thread priority: "+ t1.getPriority());  
        		System.out.println("t2 thread priority: "+ t2.getPriority());  
       		System.out.println("t3 thread priority: "+ t3.getPriority());  
  
		System.out.println("Currently Executing Thread : "
            			+ Thread.currentThread().getName()); 
               		System.out.println("Main thread priority : "
            			+ Thread.currentThread().getPriority()); 
	
		Thread.currentThread().setPriority(10); 
		System.out.println( "Main thread priority : "
            			+ Thread.currentThread().getPriority()); 
    } 
}

//USING SYNCHRONIZED METHODS: WITHOUT SYNCHRONIZATION

class First{
	public void display(String msg) {
	       System.out.print ("["+msg);
	       try {
	             Thread.sleep(1000);
                  }
	       catch(InterruptedException e){
	             e.printStackTrace();
	       }
                 System.out.println ("]");
         }
}

class Second extends Thread{
	String msg;
	First fobj;
	Second (First fp,String str){
		fobj = fp;
		msg = str;
		start();
	}
	public void run(){
		fobj.display(msg);
	}
}

public class WithoutSynMethod{
	public static void main (String[] args){
		First fnew = new First();
		Second ss = new Second(fnew, "welcome");
		Second ss1= new Second(fnew,"new");
		Second ss2 = new Second(fnew, "programmer");
	}
}

//USING SYNCHRONIZED STATEMENT

class Second extends Thread{
	String msg;
	First fobj;
	Second (First fp,String str){
		fobj = fp;
		msg = str;
		start();
	}
	public void run(){
		synchronized(fobj){
			fobj.display(msg);
		}
	}
}

//INTER THREAD COMMUNICATION EX 1

class Chat {
   boolean flag = false;
   public synchronized void question(String msg) {
      if (flag) {
         try {
            wait();
         } catch (InterruptedException e) {
            e.printStackTrace();
         }
      }
      System.out.println(msg);
      flag = true;
      notify();
   }

public synchronized void answer(String msg) {
      if (!flag) {
         try {
            wait();
         } catch (InterruptedException e) {
            e.printStackTrace();
         }
      }
      System.out.println(msg);
      flag = false;
      notify();
   }
}

//INTER THREAD COMMUNICATION EX 2

class T1 implements Runnable {
   Chat m;
   String[] s1 = { "Hi", "How are you ?", "I am also doing 				fine!" };
   public T1(Chat m1) {
      this.m = m1;
      new Thread(this, "Question").start();
   }
   public void run() {
      for (int i = 0; i < s1.length; i++) {
         m.question(s1[i]);
      }
   }
}

class T2 implements Runnable {
   Chat m;
   String[] s2 = { "Hi", "I am good, what about you?", "Great!" };

   public T2(Chat m2) {
      this.m = m2;
      new Thread(this, "Answer").start();
   }

   public void run() {
      for (int i = 0; i < s2.length; i++) {
         m.answer(s2[i]);
      }
   }
}

public class TestThread {
   public static void main(String[] args) {
      Chat m = new Chat();
      new T1(m);
      new T2(m);
   }
}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

package com.example.demo;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.stage.Popup;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to
import static javafx.application.Application.launch;

public class HelloController extends Application {
    @Override
    public void start(Stage stage) {
        //creating label email
        Text text1 = new Text("Username");
        Text text11 = new Text("Username");
        //creating label password
        Text text2 = new Text("Password");
        Text text22 = new Text("Password");
        //Creating Text Filed for email
        TextField textField1 = new TextField();
        TextField textField11 = new TextField();
        //Creating Text Filed for password
        TextField textField2 = new TextField();
        TextField textField22 = new TextField();
        //Creating Buttons
        Button button1 = new Button("Submit");
        Button button2 = new Button("Clear");
        Button button3 = new Button("Signup");
        Button button4 = new Button("Create");
        Button button5 = new Button("Login");
        //Creating a Grid Pane
        Alert a = new Alert(Alert.AlertType.NONE);
        Alert a1 = new Alert(Alert.AlertType.NONE);
        Alert a2 = new Alert(Alert.AlertType.NONE);
        Alert a3= new Alert(Alert.AlertType.NONE);
        Alert a4= new Alert(Alert.AlertType.NONE);
        Alert a5= new Alert(Alert.AlertType.NONE);
        Alert a6= new Alert(Alert.AlertType.NONE);
        Alert a7 =new Alert(Alert.AlertType.NONE);
        Text scenetitle = new Text("Login");
        scenetitle.setFont(Font.font("Blue", FontWeight.SEMI_BOLD, 30))
        ;
        Text scenetitle2 = new Text("signup");
        scenetitle2.setFont(Font.font("Blue", FontWeight.SEMI_BOLD, 30));

        GridPane gridPane = new GridPane();
        GridPane gridPane1 = new GridPane();
        GridPane gridPane2 = new GridPane();
        //Setting size for the pane
        gridPane.setMinSize(600, 400);
        gridPane1.setMinSize(600, 400);
        gridPane2.setMinSize(600, 400);

        //Setting the padding
        gridPane.setPadding(new Insets(10, 10, 10, 10));
        gridPane1.setPadding(new Insets(10, 10, 10, 10));
        gridPane2.setPadding(new Insets(10, 10, 10, 10));

        //Setting the vertical and horizontal gaps between the columns
        gridPane.setVgap(5);
        gridPane.setHgap(5);
        gridPane1.setHgap(5);
        gridPane1.setVgap(5);
        gridPane2.setHgap(5);
        gridPane2.setVgap(5);
        //Setting the Grid alignment
        gridPane.setAlignment(Pos.CENTER);
        gridPane1.setAlignment(Pos.CENTER);
        gridPane2.setAlignment(Pos.CENTER);
        //Arranging all the nodes in the grid
        gridPane.add(scenetitle, 0, 0);
        gridPane.add(text1, 0, 1);
        gridPane.add(textField1, 1, 1);
        gridPane.add(text2, 0, 2);
        gridPane.add(textField2, 1, 2);
        gridPane.add(button1, 0, 3);
        gridPane.add(button2, 1, 3);
        gridPane.add(button3, 0, 4);

        gridPane1.add(scenetitle2, 0, 0);
        gridPane1.add(text11, 0, 1);
        gridPane1.add(textField11, 1, 1);
        gridPane1.add(text22, 0, 2);
        gridPane1.add(textField22, 1, 2);
        gridPane1.add(button5,0,3);

        button1.setOnAction(e -> {
            try {
                File file = new File("new.txt");
                if(!file.exists()) {
                    a7.setContentText("Username doesn't exist");
                    a7.setAlertType(Alert.AlertType.INFORMATION);
                    a7.show();
                } else {
                    File myObj = new File("new.txt");
                    Scanner myReader = new Scanner(myObj);
                    if(myReader.hasNextLine())
                    {
                        myReader.nextLine();
                        int ch1=0,ch2=0;
                        String usr = textField1.getText();
                        String pass = textField2.getText();
                        while (myReader.hasNextLine()) {
                            String data = myReader.nextLine();
                            String datas[] = data.split(",");
                            if (usr.equals(datas[0])) {
                                ch1 = 1;
                                if (pass.equals(datas[1])) {
                                    ch2=1;
                                    a.setContentText("login successful");
                                    a.setAlertType(Alert.AlertType.INFORMATION);
                                    a.show();
                                    Text scenetitle3 = new Text("Welcome " + usr);
                                    scenetitle3.setFont(Font.font("Blue", FontWeight.SEMI_BOLD, 30));
                                    gridPane2.add(scenetitle3, 0, 0);
                                    Scene scene3 = new Scene(gridPane2);
                                    stage.setScene(scene3);
                                }
                            }
                        }
                        if(ch1==1 && ch2==0) {
                            System.out.println("wtf");
                            a1.setContentText("Wrong Password");
                            a1.setAlertType(Alert.AlertType.INFORMATION);
                            a1.show();
                        }

                        if(ch1==0&&ch2==0){
                            a2.setContentText("Username doesn't exist");
                            a2.setAlertType(Alert.AlertType.INFORMATION);
                            a2.show();


                        }

                        myReader.close();
                    }
                    else
                    {
                        a2.setContentText("Username doesn't exist");
                        a2.setAlertType(Alert.AlertType.INFORMATION);
                        a2.show();
                    }
                }


                }

               catch (FileNotFoundException ee) {
                System.out.println("An error occurred.");
                ee.printStackTrace();
            }
        });
        button2.setOnAction(e->{
            textField1.setText("");
            textField2.setText("");
        });


        gridPane1.add(button4, 1, 3);
        button4.setOnAction(e -> {
            try {
                BufferedWriter out = new BufferedWriter(
                        new FileWriter("new.txt", true));
                String s = "";
                Pattern pattern = Pattern.compile("[0-9][0-9][pP][CWTDcwtd][0-4][0-9]", Pattern.CASE_INSENSITIVE);
                if(textField11.getText().length()>6)
                {
                    a3.setContentText("Username exceeds character limit");
                    a3.setAlertType(Alert.AlertType.INFORMATION);
                    a3.show();
                }
                else
                {
                    File myObj = new File("new.txt");
                    Scanner myReader = new Scanner(myObj);
                    String usr = textField11.getText();
                    while (myReader.hasNextLine()) {
                        String data = myReader.nextLine();
                        String datas[] = data.split(",");
                        if (usr.equals(datas[0])) {
                            a4.setContentText("Username already exist");
                            a4.setAlertType(Alert.AlertType.INFORMATION);
                            a4.show();
                            return;
                        }
                    }

                            Matcher matcher = pattern.matcher(textField11.getText());
                            boolean matchFound = matcher.find();
                            if(!matchFound)
                            {
                                a5.setContentText("This login is only students of amcs dept");
                                a5.setAlertType(Alert.AlertType.INFORMATION);
                                a5.show();
                            }
                            else
                            {
                                s += "\n" + textField11.getText() + "," + textField22.getText();
                                out.write(s);
                                a6.setContentText("Created successfully");
                                a6.setAlertType(Alert.AlertType.INFORMATION);
                                a6.show();

                        }
                        }




                // Closing the connection
                out.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
        button4.setStyle("-fx-background-color: #00FF00;");
        button2.setTextFill(Color.RED);
        button2.setStyle("-fx-border-color:red");
        button1.setTextFill(Color.GREEN);
        button1.setStyle("-fx-border-color:green");
        button3.setTextFill(Color.BLUE);
        button3.setStyle("-fx-border-color:blue");


        //Creating a scene object
        Scene scene = new Scene(gridPane);
        //Setting title to the Stage
        stage.setTitle("ca2");
        Scene scene2 = new Scene(gridPane1);
        //Adding scene to the stage
        stage.setScene(scene);
        button5.setOnAction(e->{
            stage.setScene(scene);
        });
        button3.setOnAction(e -> stage.setScene(scene2));
        //Displaying the contents of the stage
        stage.show();
    }
}

$$$$$$$$$$$$$$$$$$$$$$$$$$ CHATGPT $$$$$$$$$$$$$$$$$$$$$$$$$$4 THREAD


public class MyRunnable implements Runnable {
    public void run() {
        // code to be executed in this thread
    }
}

// create the runnable and the thread
MyRunnable runnable = new MyRunnable();
Thread thread = new Thread(runnable);

// start the thread
thread.start();

////////////////////////////////////


public class MyThread extends Thread {
    public void run() {
        // code to be executed in this thread
    }
}

// create and start the thread
MyThread thread = new MyThread();
thread.start();


////////////////////////////////////

public class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}


Person person = new Person("John", 30);

This creates a new Person object with the name "John" and age 30.

//////////////////////////////////////////

public class MySubclass extends MyClass {
    // subclass variables and methods
}

inheritance

////////////////////////////////////

public class MyClass {
    private int myVariable;

    public int getMyVariable() {
        return myVariable;
    }

    public void setMyVariable(int newValue) {
        myVariable = newValue;
    }
}

encapsulation 

///////////////////////////////////////

CLASS

// Define a class
class Car {
    // Declare instance variables
    String model;
    int year;

    // Declare a constructor
    public Car(String model, int year) {
        this.model = model;
        this.year = year;
    }

    // Declare methods
    public void start() {
        System.out.println("Starting the car...");
    }

    public void stop() {
        System.out.println("Stopping the car...");
    }
}

// Use the class
public class Main {
    public static void main(String[] args) {
        // Create an object of the Car class
        Car myCar = new Car("Ford Mustang", 2022);

        // Call methods on the object
        myCar.start();
        myCar.stop();
    }
}

//////////////////////////////////////////////


package com.example.ca2;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.stage.Popup;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to
import static javafx.application.Application.launch;

public class HelloController extends Application {
    @Override
    public void start(Stage stage) {
        Label label = new Label("successful");
        // create a popup
        Popup popup = new Popup();

        // set background
        label.setStyle(" -fx-background-color: white;");

        // add the label
        popup.getContent().add(label);

        // set size of label
        label.setMinWidth(80);
        label.setMinHeight(50);

        //creating label email
        Text text1 = new Text("Username");
        Text text11 = new Text("Username");
        //creating label password
        Text text2 = new Text("Password");
        Text text22 = new Text("Password");
        //Creating Text Filed for email
        TextField textField1 = new TextField();
        TextField textField11 = new TextField();
        //Creating Text Filed for password
        TextField textField2 = new TextField();
        TextField textField22 = new TextField();
        //Creating Buttons
        Button button1 = new Button("Submit");
        Button button2 = new Button("Clear");
        Button button3 = new Button("Signup");
        Button button4 = new Button("create");
        //Creating a Grid Pane
        Alert a = new Alert(Alert.AlertType.NONE);
        a.setContentText("successfull");
        Text scenetitle = new Text("Login");
        scenetitle.setFont(Font.font("Blue", FontWeight.SEMI_BOLD, 30))
        ;
        Text scenetitle2 = new Text("signup");
        scenetitle2.setFont(Font.font("Blue", FontWeight.SEMI_BOLD, 30));

        GridPane gridPane = new GridPane();
        GridPane gridPane1 = new GridPane();
        //Setting size for the pane
        gridPane.setMinSize(600, 400);
        gridPane1.setMinSize(600, 400);
        //Setting the padding
        gridPane.setPadding(new Insets(10, 10, 10, 10));
        gridPane1.setPadding(new Insets(10, 10, 10, 10));
        //Setting the vertical and horizontal gaps between the columns
        gridPane.setVgap(5);
        gridPane.setHgap(5);
        gridPane1.setHgap(5);
        gridPane1.setVgap(5);
        //Setting the Grid alignment
        gridPane.setAlignment(Pos.CENTER);
        gridPane1.setAlignment(Pos.CENTER);
        //Arranging all the nodes in the grid
        gridPane.add(scenetitle, 0, 0);
        gridPane.add(text1, 0, 1);
        gridPane.add(textField1, 1, 1);
        gridPane.add(text2, 0, 2);
        gridPane.add(textField2, 1, 2);
        gridPane.add(button1, 0, 3);
        gridPane.add(button2, 1, 3);
        gridPane.add(button3, 0, 4);

        gridPane1.add(scenetitle2, 0, 0);
        gridPane1.add(text11, 0, 1);
        gridPane1.add(textField11, 1, 1);
        gridPane1.add(text22, 0, 2);
        gridPane1.add(textField22, 1, 2);
        button1.setOnAction(e -> {
            try {
                File myObj = new File("new.txt");
                Scanner myReader = new Scanner(myObj);
                myReader.nextLine();
                String usr = textField1.getText();
                String pass = textField2.getText();
                while (myReader.hasNextLine()) {
                    String data = myReader.nextLine();
                    String datas[] = data.split(",");
                    if (usr.equals(datas[0])) {
                        if (pass.equals(datas[1])) {
                            a.setContentText("successful");
                            a.setAlertType(Alert.AlertType.INFORMATION);
                            a.show();
                        }
                        else{
                            a.setContentText("unsuccessful");
                            a.setAlertType(Alert.AlertType.INFORMATION);
                            a.show();
                        }
                    }
                    else{
                        a.setContentText("unsuccessful");
                        a.setAlertType(Alert.AlertType.INFORMATION);
                        a.show();
                    }
                }
                myReader.close();
            } catch (FileNotFoundException ee) {
                System.out.println("An error occurred.");
                ee.printStackTrace();
            }
        });
        button2.setOnAction(e->{
            textField1.setText("");
            textField2.setText("");
        });
        gridPane1.add(button4, 1, 3);
        button4.setOnAction(e -> {
            try {
                BufferedWriter out = new BufferedWriter(
                        new FileWriter("new.txt", true));
                String s = "";
                Pattern pattern = Pattern.compile("[0-9][0-9][pP][CWTDcwtd][0-4][0-9]", Pattern.CASE_INSENSITIVE);
                Matcher matcher = pattern.matcher(textField11.getText());
                boolean matchFound = matcher.find();
                if(!matchFound)
                {
                    a.setContentText("This login is only students of amcs dept");
                    a.setAlertType(Alert.AlertType.INFORMATION);
                    a.show();
                }
                else
                {
                    s += "\n" + textField11.getText() + "," + textField22.getText();
                    out.write(s);
                }

                // Closing the connection
                out.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
        //Creating a scene object
        Scene scene = new Scene(gridPane);
        //Setting title to the Stage
        stage.setTitle("Grid Pane Example");
        Scene scene2 = new Scene(gridPane1);
        //Adding scene to the stage
        stage.setScene(scene);
        button3.setOnAction(e -> stage.setScene(scene2));
        //Displaying the contents of the stage
        stage.show();
    }

    public static void main(String args[]) {
        launch(args);
    }

}

////////////////////////////////////////////////////////

class WeakPasswordException extends Exception {
    public WeakPasswordException(String message) {
        super(message);
    }
}

public class PasswordValidator {
    public static void validate(String password) throws WeakPasswordException {
        if (password.length() < 10 || password.length() > 20) {
            throw new WeakPasswordException("Password should be at least 10 characters and at most 20 characters long.");
        }

        boolean containsDigit = false;
        boolean containsSpecial = false;
        boolean containsLetter = false;

        for (char c : password.toCharArray()) {
            if (Character.isDigit(c)) {
                containsDigit = true;
            } else if (!Character.isAlphabetic(c)) {
                containsSpecial = true;
            } else if (Character.isLetter(c)) {
                containsLetter = true;
            }
        }

        if (!containsDigit) {
            throw new WeakPasswordException("Password should contain at least one digit.");
        }

        if (!containsSpecial) {
            throw new WeakPasswordException("Password should contain at least one special character.");
        }

        if (!containsLetter) {
            throw new WeakPasswordException("Password should contain at least one letter.");
        }
    }

    public static void main(String[] args) {
        String password = "weakpass";
        try {
            validate(password);
            System.out.println("Password is strong.");
        } catch (WeakPasswordException e) {
            System.out.println("Password is weak: " + e.getMessage());
        }
    }
}






calculator:

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class Calculator extends Application {
   
    private TextField numField1;
    private TextField numField2;
    private Label resultLabel;

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Calculator");
       
        // Create grid pane to hold the input fields and buttons
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setHgap(5);
        grid.setVgap(5);
       
        // Create the input fields
        numField1 = new TextField();
        numField1.setPromptText("Enter a number");
        numField1.setPrefColumnCount(10);
        numField2 = new TextField();
        numField2.setPromptText("Enter a number");
        numField2.setPrefColumnCount(10);
       
        // Create the buttons
        Button addButton = new Button("Add");
        addButton.setOnAction(new AddButtonHandler());
        Button subtractButton = new Button("Subtract");
        subtractButton.setOnAction(new SubtractButtonHandler());
        Button multiplyButton = new Button("Multiply");
        multiplyButton.setOnAction(new MultiplyButtonHandler());
        Button divideButton = new Button("Divide");
        divideButton.setOnAction(new DivideButtonHandler());
       
        // Add the input fields and buttons to the grid pane
        grid.add(new Label("Number 1:"), 0, 0);
        grid.add(numField1, 1, 0);
        grid.add(new Label("Number 2:"), 0, 1);
        grid.add(numField2, 1, 1);
        grid.add(addButton, 0, 2);
        grid.add(subtractButton, 1, 2);
        grid.add(multiplyButton, 0, 3);
        grid.add(divideButton, 1, 3);
       
        // Create the result label
        resultLabel = new Label();
        HBox resultBox = new HBox(resultLabel);
        resultBox.setPadding(new Insets(10, 0, 0, 0));
        resultBox.setStyle("-fx-border-style: solid inside;"
                + "-fx-border-width: 1;"
                + "-fx-border-color: black;");
       
        // Create the scene and set it on the stage
        Scene scene = new Scene(new HBox(grid, resultBox), 300, 150);
        primaryStage.setScene(scene);
        primaryStage.show();
    }
   
    // Handler for the Add button
    class AddButtonHandler implements EventHandler<ActionEvent> {
        public void handle(ActionEvent event) {
            try {
                int num1 = Integer.parseInt(numField1.getText());
                int num2 = Integer.parseInt(numField2.getText());
                int result = num1 + num2;
                resultLabel.setText(String.valueOf(result));
            } catch (NumberFormatException e) {
                resultLabel.setText("Invalid input");
            }
        }
    }
   
    // Handler for the Subtract button
    class SubtractButtonHandler implements EventHandler<ActionEvent> {
        public void handle(ActionEvent event) {
            try {
                int num1 = Integer.parseInt(numField1.getText());
                int num2 = Integer.parseInt(numField2.getText());
                int result = num1 - num2;
                resultLabel.setText(String.valueOf(result));
            } catch (NumberFormatException e) {
                resultLabel.setText("Invalid input");

statistical:

public class StatisticsCalculator extends Thread {
    private int[] numbers;
    private int start, end;
    private int average, minimum, maximum;
   
    public StatisticsCalculator(int[] numbers, int start, int end) {
        this.numbers = numbers;
        this.start = start;
        this.end = end;
    }
   
    @Override
    public void run() {
        if (Thread.currentThread().getName().equals("averageThread")) {
            calculateAverage();
        } else if (Thread.currentThread().getName().equals("minimumThread")) {
            calculateMinimum();
        } else if (Thread.currentThread().getName().equals("maximumThread")) {
            calculateMaximum();
        }
    }
   
    private void calculateAverage() {
        int sum = 0;
        for (int i = start; i < end; i++) {
            sum += numbers[i];
        }
        average = sum / (end - start);
    }
   
    private void calculateMinimum() {
        minimum = numbers[start];
        for (int i = start; i < end; i++) {
            if (numbers[i] < minimum) {
                minimum = numbers[i];
            }
        }
    }
   
    private void calculateMaximum() {
        maximum = numbers[start];
        for (int i = start; i < end; i++) {
            if (numbers[i] > maximum) {
                maximum = numbers[i];
            }
        }
    }
   
    public int getAverage() {
        return average;
    }
   
    public int getMinimum() {
        return minimum;
    }
   
    public int getMaximum() {
        return maximum;
    }
}

public class Main {
    private static int[] numbers;
    private static int numThreads = 3;
    private static StatisticsCalculator[] threads;
   
    public static void main(String[] args) {
        parseArgs(args);
        initThreads();
        startThreads();
        joinThreads();
        printResults();
    }
   
    private static void parseArgs(String[] args) {
        numbers = new int[args.length];
        for (int i = 0; i < args.length; i++) {
            numbers[i] = Integer.parseInt(args[i]);
        }
    }
   
    private static void initThreads() {
        threads = new StatisticsCalculator[numThreads];
        int chunkSize = numbers.length / numThreads;
        for (int i = 0; i < numThreads; i++) {
            int start = i * chunkSize;
            int end = (i + 1) * chunkSize;
            if (i == numThreads - 1) {
                end = numbers.length;
            }
            threads[i] = new StatisticsCalculator(numbers, start, end);
            threads[i].setName(getThreadName(i));
        }
    }
   
    private static String getThreadName(int index) {
        switch (index) {
            case 0:
                return "averageThread";
            case 1:
                return "minimumThread";
            case 2:
                return "maximumThread";
            default:
                return null;
        }
    }
   
    private static void startThreads() {
        for (int i = 0; i < numThreads; i++) {
            threads[i].start();
        }
    }
   
    private static void joinThreads() {
        for (int i = 0; i < numThreads; i++) {
            try {
                threads[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
   
    private static void printResults() {
        System.out.println("The average value is " + threads[0].getAverage


higher priority:

public class ThreadPriorityExample {
   
    public static void main(String[] args) {
       
        // Create the two threads
        LowPriorityThread lowPriorityThread = new LowPriorityThread();
        HighPriorityThread highPriorityThread = new HighPriorityThread();
       
        // Set the priorities of the threads
        lowPriorityThread.setPriority(Thread.MIN_PRIORITY);
        highPriorityThread.setPriority(Thread.MAX_PRIORITY);
       
        // Start the threads
        lowPriorityThread.start();
        highPriorityThread.start();
       
    }
   
    static class LowPriorityThread extends Thread {
       
        public void run() {
            int i = 0;
            while (i < 10) {
                System.out.println("Low priority thread is running: " + i);
                i++;
            }
        }
       
    }
   
    static class HighPriorityThread extends Thread {
       
        public void run() {
            int i = 0;
            while (i < 10) {
                System.out.println("High priority thread is running: " + i);
                i++;
            }
        }
       
    }
   
}



english:

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Number of Counters:");
        int numOfCounters = scanner.nextInt();

        FrequencyCounter[] counters = new FrequencyCounter[numOfCounters];
        String[] texts = new String[numOfCounters];

        // Get input text for each counter
        for (int i = 0; i < numOfCounters; i++) {
            System.out.print("Enter text for counter " + (i + 1) + ": ");
            scanner.nextLine(); // consume the newline character
            texts[i] = scanner.nextLine();
            counters[i] = new FrequencyCounter(texts[i]);
        }

        // Start the threads and wait for them to finish
        try {
            for (int i = 0; i < numOfCounters; i++) {
                counters[i].start();
            }

            for (int i = 0; i < numOfCounters; i++) {
                counters[i].join();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Print the character frequency for each counter
        for (int i = 0; i < numOfCounters; i++) {
            System.out.println("Counter " + (i + 1) + " Result :");
            counters[i].printCharacterFrequency();
        }
    }
}

class FrequencyCounter extends Thread {
    private final String text;
    private final Map<Character, Integer> frequency = new HashMap<>();

    public FrequencyCounter(String text) {
        this.text = text;
    }

    @Override
    public void run() {
        // Calculate character frequency for the assigned text
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            frequency.put(c, frequency.getOrDefault(c, 0) + 1);
        }
    }

    public void printCharacterFrequency() {
        for (Map.Entry<Character, Integer> entry : frequency.entrySet()) {
            System.out.print(entry.getKey() + ":" + entry.getValue() + " ");
        }
        System.out.println();
    }
}




thread cooperation:

import java.util.Random;

public class ThreadCooperationDemo {

    private static final int MAX_AMOUNT = 1000; // maximum amount to deposit/withdraw
    private static final int MAX_DELAY = 500; // maximum delay in milliseconds
   
    private static int balance = 0; // shared account balance
   
    public static void main(String[] args) {
        Thread depositorThread = new Thread(new Depositor());
        Thread withdrawerThread = new Thread(new Withdrawer());
       
        depositorThread.start();
        withdrawerThread.start();
    }
   
    private static class Depositor implements Runnable {
        private final Random random = new Random();
       
        public void run() {
            while (true) {
                int amount = random.nextInt(MAX_AMOUNT) + 1; // generate a random deposit amount
                synchronized (ThreadCooperationDemo.class) {
                    balance += amount;
                    System.out.println("Deposited " + amount + ", new balance is " + balance);
                    ThreadCooperationDemo.class.notify(); // notify the other thread that new funds are available
                }
                try {
                    Thread.sleep(random.nextInt(MAX_DELAY)); // simulate some delay before depositing again
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
   
    private static class Withdrawer implements Runnable {
        private final Random random = new Random();
       
        public void run() {
            while (true) {
                int amount = random.nextInt(MAX_AMOUNT) + 1; // generate a random withdrawal amount
                synchronized (ThreadCooperationDemo.class) {
                    while (balance < amount) {
                        System.out.println("Not enough funds for withdrawal of " + amount + ", current balance is " + balance);
                        try {
                            ThreadCooperationDemo.class.wait(); // wait for new funds to be deposited
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    balance -= amount;
                    System.out.println("Withdrawn " + amount + ", new balance is " + balance);
                }
                try {
                    Thread.sleep(random.nextInt(MAX_DELAY)); // simulate some delay before withdrawing again
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
////////////////////////////////

Sure, here's an example Java code that shows how to use multithreading and exception handling:

```
public class MultiThreadExample implements Runnable {
    public void run() {
        try {
            for(int i=0;i<10;i++) {
                System.out.println("Thread " + Thread.currentThread().getId() + ": " + i);
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted");
        }
    }

    public static void main(String[] args) {
        try {
            Thread t1 = new Thread(new MultiThreadExample());
            Thread t2 = new Thread(new MultiThreadExample());

            t1.start();
            t2.start();

            t1.join();
            t2.join();
        } catch (Exception e) {
            System.out.println("Caught an exception: " + e.getMessage());
        }
    }
}
